<?xml version="1.0" encoding="UTF-8" ?>

<project name="Behat"  description="Contains all behat testing targets." default="test-run-behat">

    <property file="${phing.dir.behat}/behat.props" logoutput="false" />

    <!-- Run full functional testing with behat. -->
    <target
        name="test-run-behat"
        description="Refresh configuration and run behat scenarios."
        depends="
            test-behat-setup,
            test-composer-install">
        <echo msg="Starting testing..." level="info" />
        <foreach param="dirname" absparam="absname" target="test-behat-exec">
            <fileset dir="${behat.dir}">
                <include name="**.yml"/>
            </fileset>
        </foreach>

        <!-- Run all provided behat configuration tests -->
        <if>
            <equals arg1="${behat.generic.package.enable}" arg2="1" />
            <then>
                <foreach param="dirname" absparam="absname" target="test-behat-exec">
                    <fileset dir="${behat.dir}/vendor/${behat.generic.package}">
                        <include name="**.yml"/>
                    </fileset>
                </foreach>
            </then>
        </if>
    </target>

    <!-- Run Behat tests. -->
    <target name="test-behat-exec" hidden="true">
        <behat
            executable="${behat.bin}"
            config="${absname}"
            strict="${behat.options.strict}"
            verbose="${behat.options.verbosity}"
            passthru="${behat.options.passthru}"
            haltonerror="${behat.options.haltonerror"
            checkreturn="true"
        />
    </target>

    <!-- Set up Behat. -->
    <target name="test-behat-setup" hidden="true">
        <if>
            <isset property="env.FLICKR_KEY" />
            <then>
                <property name="flickr.key" value="${env.FLICKR_KEY}" override="true" />
            </then>
        </if>
        <if>
            <isset property="env.FLICKR_SECRET" />
            <then>
                <property name="flickr.secret" value="${env.FLICKR_SECRET}" override="true" />
            </then>
        </if>

        <if>
            <equals arg1="${behat.generic.package.enable}" arg2="1" />
            <then>
                <phingcall target="test-behat-setup-generic" />
            </then>
        </if>

        <copy todir="${behat.dir}" overwrite="true">
            <fileset dir="${behat.dir}" casesensitive="yes">
                <include name="*.yml.dist" />
            </fileset>
            <filterchain>
                <replacetokens begintoken="{{ " endtoken=" }}">
                    <token key="behat.dir" value="${behat.dir}" />
                    <token key="behat.base_url" value="${behat.base_url}" />
                    <token key="behat.wd_host.url" value="${behat.wd_host.url}" />
                    <token key="behat.browser.name" value="${behat.browser.name}" />
                    <token key="behat.api.driver" value="${behat.api.driver}" />
                    <token key="build.platform.dir" value="${build.platform.dir}" />
                    <token key="behat.drush.alias" value="${behat.drush.alias}" />
                    <token key="behat.subcontexts.path" value="${behat.subcontexts.path}" />
                    <token key="behat.generic.package" value="${behat.generic.package}" />
                    <token key="behat.tags" value="${behat.tags}" />
                    <token key="flickr.key" value="${flickr.key}" />
                    <token key="flickr.secret" value="${flickr.secret}" />
                    <token key="toolkit.dir.bin.drush" value="${toolkit.dir.bin.drush}" />
                    <token key="drush.db.dump" value="${drush.db.dump}" />
                    <token key="behat.formatter.name" value="${behat.formatter.name}" />
                    <token key="integration.server.port" value="${integration.server.port}" />
                    <token key="varnish.server.port" value="${varnish.server.port}" />
                </replacetokens>
            </filterchain>
            <mapper type="glob" from="*.yml.dist" to="*.yml" />
        </copy>
        <!-- Workaround for Drone. -->
        <exec command="chown 1000:1000  ${build.subsite.dir.tmp}" />
    </target>

    <!-- Download and put in place generic/smoke test. -->
    <target name="test-behat-setup-generic" hidden="true">
        <echo msg="Installing ${behat.generic.package} package." />
        <composer command="require" composer="${project.bin.composer}">
            <arg value="${behat.generic.package}" />
            <arg value="--working-dir=${behat.dir}" />
            <arg value="--no-interaction" />
            <arg value="--no-suggest" />
            <arg value="--ansi" />
            <arg value="--no-scripts" />
            <arg value="--no-progress" />
        </composer>

        <!-- Generating settings file inside vendor folder. -->
        <property name="source.dir" value="${behat.dir}/vendor/${behat.generic.package}" />
        <copy todir="${source.dir}" overwrite="true">
            <fileset dir="${source.dir}" casesensitive="yes">
                <include name="*.yml.dist" />
            </fileset>
            <filterchain>
                <replacetokens begintoken="{{ " endtoken=" }}">
                    <token key="behat.dir" value="${behat.dir}" />
                    <token key="behat.base_url" value="${behat.base_url}" />
                    <token key="behat.wd_host.url" value="${behat.wd_host.url}" />
                    <token key="behat.browser.name" value="${behat.browser.name}" />
                    <token key="behat.api.driver" value="${behat.api.driver}" />
                    <token key="build.platform.dir" value="${build.platform.dir}" />
                    <token key="behat.drush.alias" value="${behat.drush.alias}" />
                    <token key="behat.subcontexts.path" value="${behat.subcontexts.path}" />
                    <token key="behat.generic.package" value="${behat.generic.package}" />
                    <token key="behat.tags" value="${behat.tags}" />
                    <token key="flickr.key" value="${flickr.key}" />
                    <token key="flickr.secret" value="${flickr.secret}" />
                    <token key="toolkit.dir.bin.drush" value="${toolkit.dir.bin.drush}" />
                    <token key="drush.db.dump" value="${drush.db.dump}" />
                    <token key="behat.formatter.name" value="${behat.formatter.name}" />
                    <token key="integration.server.port" value="${integration.server.port}" />
                    <token key="varnish.server.port" value="${varnish.server.port}" />
                </replacetokens>
            </filterchain>
            <mapper type="glob" from="*.yml.dist" to="*.yml" />
        </copy>
        <!--<copy todir="${behat.dir}/features" overwrite="true">-->
            <!--<fileset dir="${source.dir}/features" casesensitive="yes">-->
                <!--<include name="**" />-->
            <!--</fileset>-->
        <!--</copy>-->
    </target>

    <!-- Symlink the Behat bin and test directory in the subsite folder. -->
    <target name="test-behat-setup-link" hidden="true">
        <property name="behat-test-location" value="${build.platform.dir}" />
        <property name="behat-test-binary" value="${build.platform.dir}/vendor/behat/behat/bin/behat" />
        <relsym link="platform" overwrite="true">
            <fileset dir="${behat.dir}" casesensitive="yes">
                <include name="*.yml" />
            </fileset>
        </relsym>
        <relsym link="${behat-test-location}/features" target="../tests/features" />
        <relsym link="${behat-test-location}/tests" target="../tests" />
        <relsym link="${behat.bin}" target="${behat-test-binary}" overwrite="true" />
    </target>

    <!-- Install Composer dependencies without development dependencies. -->
    <target name="test-composer-install" hidden="true">
        <echo msg="Run 'composer install' in test folder." />
        <composer command="install" composer="${project.bin.composer}">
            <arg value="--working-dir=${tests.dir}" />
            <arg value="--no-interaction" />
            <arg value="--no-suggest" />
            <arg value="--ansi" />
            <arg value="--no-progress" />
        </composer>
    </target>

</project>
