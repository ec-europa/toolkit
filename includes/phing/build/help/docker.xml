<?xml version="1.0" encoding="UTF-8" ?>

<project name="docker" description="Contains phing targets to manage docker containers. (experimental!)." default="">

    <target name="docker-check-mysql" description="Check if mysql container exists." hidden="true">
        <echo msg="Checking if mysql container exists" />
        <exec command="WORKSPACE=${project.basedir} COMPOSE_PROJECT_NAME=${docker.project.id} ${toolkit.dir.incl.docker}/dbash ps mysql | grep -q 'Up\|Exit'" passthru="true" logoutput="false" returnproperty="docker-check-mysql" />
        <echo msg="${docker-check-mysql}" />
    </target>

    <target name="docker-compose-backup" description="Backup database." hidden="true">
        <if>
            <isset property="backup-location" />
            <then>
                <mkdir dir="${backup-location}" />
            </then>
            <else>
                <property name="backup-location" value="${project.tmp.dir}/databases" />
                <property name="backup-filename" value="${docker.project.id}.tar.gz" />
            </else>
        </if>
        <echo msg="Backing up database for ${docker.project.id}" />
        <exec command="WORKSPACE=${project.basedir} COMPOSE_PROJECT_NAME=${docker.project.id} ${toolkit.dir.incl.docker}/dbash backup ${backup-location}/${backup-filename}" passthru="true" logoutput="false" />
    </target>

    <target name="docker-compose-down" description="Trash docker project." hidden="true">
        <echo msg="Removing containers and volumes for ${docker.project.id}" />
        <exec command="docker-compose -p ${docker.project.id} -f ${toolkit.dir.incl.docker}/docker-compose.yml down --volumes" />
        <delete file="${project.basedir}/docker-${docker.project.id}" />
    </target>

    <target name="docker-compose-restore" description="Restore database." hidden="true">
        <if>
            <not>
                <and>
                    <isset property="backup-location" />
                    <isset property="backup-location" />
                </and>
            </not>
            <then>
                <property name="backup-location" value="${project.tmp.dir}/databases" />
                <property name="backup-filename" value="${docker.project.id}.tar.gz" />
            </then>
        </if>
        <if>
            <available file="${backup-location}/${backup-filename}" />
            <then>
                <echo msg="Restoring database for ${docker.project.id}" />
                <exec command="WORKSPACE=${project.basedir} COMPOSE_PROJECT_NAME=${docker.project.id} ${toolkit.dir.incl.docker}/dbash restore ${backup-location}/${backup-filename}" passthru="true" logoutput="false" />
            </then>
            <else>
                <echo msg="File ${backup-location}/${backup-filename} does not exist." level="error" />
            </else>
        </if>
    </target>

    <target name="docker-compose-stop" description="Stop docker project." hidden="true">
        <echo msg="Stopping containers for ${docker.project.id}" />
        <exec command="docker-compose -p ${docker.project.id} -f ${toolkit.dir.incl.docker}/docker-compose.yml stop mysql" passthru="true" />
        <exec command="WORKSPACE=${project.basedir} DB_LOCATION_DIR=${share.path.subsites.packages.database} docker-compose -p ${docker.project.id} -f ${toolkit.dir.incl.docker}/docker-compose.yml -f ${toolkit.dir.incl.docker}/backup-restore.yml run backup" passthru="true" />
        <exec command="${project.basedir}/docker-${docker.project.id} ps" passthru="true" />
    </target>

    <target name="docker-compose-up" description="Start docker project." hidden="true">
        <echo msg="Starting containers for ${docker.project.id}" />
        <mkdir dir="${build.platform.dir}" />
        <mkdir dir="${share.path.platform.packages.database}/platform-dev-${platform.package.version}" />
        <exec command="WORKSPACE=${project.basedir} docker-compose -p ${docker.project.id} -f ${toolkit.dir.incl.docker}/docker-compose.yml up -d" />
        <relsym link="${project.basedir}/docker-${docker.project.id}" target="${toolkit.dir.incl.docker}/dbash" overwrite="true" />
        <exec command="${project.basedir}/docker-${docker.project.id} ps" passthru="true" />
    </target>

    <target name="docker-backstop-generate" description="Generate the backstop files." hidden="true">
      <copy todir="${project.basedir}" >
        <fileset dir="${toolkit.dir.incl.docker}/docker-backstopjs">
          <include name="backstop_data/**" />
        </fileset>
      </copy>
      <copy file="${toolkit.dir.incl.docker}/docker-backstopjs/backstop.json" tofile="${project.basedir}/backstop.json" overwrite="true" />
      <exec command="sed -i -e 's/https:\/\//http:\/\//g' -i backstop_data/engine_scripts/puppet/loadCookies.js" escape="false" />
      <exec command="sed -i -e 's/  console\.log/  \/\/ console\.log/g' -i backstop_data/engine_scripts/puppet/loadCookies.js" escape="false" />
      <propertyregex property="profile.core.major" subject="${profile.core}" pattern="^([0-9]+)\." match="$1" override="true" />
      <if>
        <equals arg1="${profile.core.major}" arg2="7" />
        <then>
          <drush command="watchdog-smoketest" root="${build.platform.dir}" alias="@${drush.alias.default}" bin="${toolkit.dir.bin.drush}">
              <option name="type" value="backstop" />
          </drush>
        </then>
        <else>
          <echo msg="Skip backstop for Drupal ${profile}." />
        </else>
      </if>
    </target>

</project>
