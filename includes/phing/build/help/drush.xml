<?xml version="1.0" encoding="UTF-8" ?>

<project name="drush" description="Contains drush helper targets that help manage your Drupal installation." default="">

    <target name="drush-aliases-generate" hidden="true" description="Generate drush aliases for each subsite folder.">
        <mkdir dir="${build.platform.dir.sites}/all/drush" />
        <drushgal siteRoot="${build.platform.dir}" siteUrl="${project.url.base}" />
    </target>

    <target name="drush-files-dirs-create" description="Create site files directories." hidden="true">
        <echo message="Creating files directories for ${db.name}." />
        <drush command="php-script" root="${build.platform.dir}" alias="@${drush.alias.default}" bin="${toolkit.dir.bin.drush}" verbose="${drush.verbose}" color="${drush.color}">
            <param>${toolkit.dir.incl.drush}/generate-directories.php</param>
        </drush>
    </target>

    <target name="drush-variable-set-string" description="Use a string to set variable with drush" hidden="true">
        <exec command="echo ${variable-string} | sed -e 's/devel\.vars\.\(.*\)=\(.*\)$/\1/'" outputProperty="variable-name" />
        <exec command="echo ${variable-string} | cut -d'=' -f2" outputProperty="variable-value" />
        <propertyregex property="profile.core.major" subject="${profile.core}" pattern="^([0-9]+)\." match="$1" override="true" />
        <if>
            <equals arg1="${profile.core.major}" arg2="7" />
            <then>
                <if>
                    <not>
                        <or>
                            <equals arg1="${variable-name}" arg2="" />
                            <equals arg1="${variable-value}" arg2="" />
                        </or>
                    </not>
                    <then>
                        <drush
                                command="vset"
                                assume="yes"
                                root="${build.platform.dir}"
                                alias="@${drush.alias.default}"
                                bin="${toolkit.dir.bin.drush}"
                                verbose="${drush.verbose}"
                                color="${drush.color}">
                            <param>${variable-name}</param>
                            <param>${variable-value}</param>
                        </drush>
                    </then>
                </if>
            </then>
        </if>

    </target>

    <target name="drush-variable-set" description="Set a variable with drush" hidden="true">
        <drush
            command="vset"
            assume="yes"
            root="${build.platform.dir}"
            alias="@${drush.alias.default}"
            bin="${toolkit.dir.bin.drush}"
            verbose="${drush.verbose}"
            color="${drush.color}">
            <param>${variable-name}</param>
            <param>${variable-value}</param>
        </drush>
    </target>

    <target name="drush-files-dirs-htaccess" hidden="true" description="Ensure the presence of htaccess files.">
        <drush
            command="php-eval"
            assume="yes"
            root="${build.platform.dir}"
            alias="@${drush.alias.default}"
            bin="${toolkit.dir.bin.drush}"
            verbose="${drush.verbose}"
            color="${drush.color}">
            <param>"file_ensure_htaccess()"</param>
        </drush>
    </target>

    <target name="drush-make-no-core" description="Make a file without core." hidden="true">
        <if>
            <available file="${make-file}" type="file" />
            <then>
                <loadfile property="make-string" file="${make-file}" />
                <propertyregex
                    property="not.empty"
                    subject="${make-string}"
                    pattern="([^#; ])(libraries\[|projects\[|includes\[)"
                    match="$1"
                    casesensitive="false"
                    defaultvalue="empty" />
                <if>
                    <equals arg1="${not.empty}" arg2="empty" />
                    <then>
                        <echo msg="Empty make file found. Skipping... ${not.empty}" />
                    </then>
                    <else>
                        <echo message="Running make file ${make-file} into folder ${make-folder}." />
                        <mkdir dir="${project.tmp.dir}/make" />
                        <drush command="make" assume="yes" bin="${toolkit.dir.bin.drush}" pipe="yes" verbose="${drush.verbose}" color="${drush.color}">
                            <param>${make-file}</param>
                            <param>${make-folder}</param>
                            <option name="contrib-destination">${make-destination}</option>
                            <option name="concurrency">10</option>
                            <option name="no-patch-txt"></option>
                            <option name="no-core"></option>
                        </drush>
                    </else>
                </if>
            </then>
        </if>
    </target>

    <target name="drush-make-secure" hidden="true" description="Check make file for insecure modules.">
        <drushms makefile="${makefile-path}" failon="revoked" />
    </target>

    <target name="drush-make-secure-all" hidden="true" description="Check all make files for insecure modules.">
        <echo msg="Checking make files for projects not covered by Drupal's security advisory." />
        <foreach param="makefile" absparam="makefile-path" target="drush-make-secure">
            <fileset dir="${resources.dir}">
                <include name="*.make" />
            </fileset>
        </foreach>
    </target>

    <target name="drush-modules-enable" description="Enable a set of modules." hidden="true">
        <if>
            <equals arg1="${profile}" arg2="multisite_drupal_standard"/>
            <then>
                <drush
                    command="pm-enable"
                    assume="yes"
                    root="${build.platform.dir}"
                    alias="@${drush.alias.default}"
                    bin="${toolkit.dir.bin.drush}"
                    verbose="${drush.verbose}"
                    color="${drush.color}">
                    <param>${project.drupal.modules}</param>
                </drush>
            </then>
        </if>
    </target>

    <target name="drush-node-access-rebuild" hidden="true" description="Rebuild the node access.">
        <drush
            command="php-eval"
            assume="yes"
            root="${build.platform.dir}"
            alias="@${drush.alias.default}"
            bin="${toolkit.dir.bin.drush}"
            verbose="${drush.verbose}"
            color="${drush.color}">
            <param>"node_access_rebuild()"</param>
        </drush>
    </target>

    <target name="drush-registry-rebuild" hidden="true" description="Perform a registry rebuild.">
        <trycatch>
            <try>
                <exec command="${toolkit.dir.bin.drush} rr --help" checkreturn="true" />
            </try>
            <catch>
                <phingcall target="drush-registry-rebuild-dl" />
            </catch>
            <finally>
                <trycatch>
                    <try>
                        <propertyregex property="profile.core.major" subject="${profile.core}" pattern="^([0-9]+)\." match="$1" override="true" />
                        <if>
                          <equals arg1="${profile.core.major}" arg2="7" />
                          <then>
                            <drush command="sqlq" root="${build.platform.dir}" alias="@${drush.alias.default}" bin="${toolkit.dir.bin.drush}" verbose="${drush.verbose}" color="${drush.color}">
                                <option name="db-url" value="${db.url}" />
                                <param>"update system set status=0 where name IN (${drush.rr.disable});"</param>
                            </drush>
                            <drush command="registry-rebuild" assume="yes" root="${build.platform.dir}" alias="@${drush.alias.default}" bin="${toolkit.dir.bin.drush}" verbose="${drush.verbose}">
                                <param>${drush.rr.options}</param>
                            </drush>
                            <drush command="sqlq" root="${build.platform.dir}" alias="@${drush.alias.default}" bin="${toolkit.dir.bin.drush}" verbose="${drush.verbose}" color="${drush.color}">
                                <option name="db-url" value="${db.url}" />
                                <param>"update system set status=1 where name IN (${drush.rr.disable});"</param>
                            </drush>
                          </then>
                          <else>
                            <drush command="cr" assume="yes" root="${build.platform.dir}" alias="@${drush.alias.default}" bin="${toolkit.dir.bin.drush}" verbose="${drush.verbose}">
                            </drush>
                          </else>
                        </if>
                    </try>
                    <catch>
                      <propertyregex property="profile.core.major" subject="${profile.core}" pattern="^([0-9]+)\." match="$1" override="true" />
                      <if>
                        <equals arg1="${profile.core.major}" arg2="7" />
                        <then>
                          <drush command="registry-rebuild" assume="yes" root="${build.platform.dir}" alias="@${drush.alias.default}" bin="${toolkit.dir.bin.drush}" verbose="${drush.verbose}">
                              <param>${drush.rr.options}</param>
                          </drush>
                        </then>
                        <else>
                          <drush command="cr" assume="yes" root="${build.platform.dir}" alias="@${drush.alias.default}" bin="${toolkit.dir.bin.drush}" verbose="${drush.verbose}">
                          </drush>
                        </else>
                      </if>
                    </catch>
                </trycatch>
            </finally>
        </trycatch>
    </target>

    <target name="drush-registry-rebuild-dl" hidden="true" description="Download drush registry-rebuild.">
        <echo message="Installing registry rebuild on user account." />
        <exec command="${toolkit.dir.bin.drush} pm-download registry_rebuild-7 -n >/dev/null" />
        <exec command="${toolkit.dir.bin.drush} cc drush >/dev/null" />
    </target>

    <target name="drush-settings-generate" description="Generate the settings.php file.">
          <exec command="chmod 775 ${build.subsite.dir}/settings.php" />
          <propertyregex property="profile.core.major" subject="${profile.core}" pattern="^([0-9]+)\." match="$1" override="true" />
          <if>
            <equals arg1="${profile.core.major}" arg2="7" />
            <then>
              <copy file="${toolkit.dir.incl.drush}/generate-settings.php" tofile="${project.tmp.dir}/generate-settings.php" overwrite="true">
                  <filterchain>
                      <replacetokens begintoken="%%" endtoken="%%">
                          <token key="db.type" value="${db.type}" />
                          <token key="db.name" value="${db.name}" />
                          <token key="db.user" value="${db.user}" />
                          <token key="db.password" value="${db.password}" />
                          <token key="db.host" value="${db.host}" />
                          <token key="db.port" value="${db.port}" />
                          <token key="db.prefix" value="${db.prefix}" />
                          <token key="base_url" value="${project.url.base}" />
                          <token key="error_level" value="${devel.vars.error_level}" />
                          <token key="views_ui_show_sql_query" value="${devel.vars.views_ui_show_sql_query}" />
                          <token key="views_ui_show_performance_statistics" value="${devel.vars.views_ui_show_performance_statistics}" />
                          <token key="views_show_additional_queries" value="${devel.vars.views_show_additional_queries}" />
                          <token key="stage_file_proxy_origin" value="${devel.vars.stage_file_proxy_origin}" />
                          <token key="stage_file_proxy_origin_dir" value="${devel.vars.stage_file_proxy_origin_dir}" />
                          <token key="stage_file_proxy_hotlink" value="${devel.vars.stage_file_proxy_hotlink}" />
                          <token key="file_public_path" value="${build.subsite.dir.files}" />
                          <token key="file_private_path" value="${build.subsite.dir.files}/private_files" />
                          <token key="file_temporary_path" value="${build.subsite.dir.tmp}" />
                          <token key="update_free_access" value="${drupal.update.free.access}" />
                          <token key="drupal_hash_salt" value="${drupal.hash.salt}" />
                      </replacetokens>
                  </filterchain>
              </copy>
              <drush command="php-script" root="${build.platform.dir}" alias="@${drush.alias.default}" bin="${toolkit.dir.bin.drush}" verbose="${drush.verbose}" color="${drush.color}">
                  <param>${project.tmp.dir}/generate-settings.php</param>
              </drush>
              
              <!-- Append EU Login specific information. -->
              <append destFile="${build.subsite.dir}/settings.php" text="${line.separator}define('FPFIS_ECAS_URL', 'ecas.ec.europa.eu');" />
              <append destFile="${build.subsite.dir}/settings.php" text="${line.separator}define('FPFIS_ECAS_PORT', 443);" />
              <append destFile="${build.subsite.dir}/settings.php" text="${line.separator}define('FPFIS_ECAS_URI', '/cas');" />
              
              <drush command="cc" root="${build.platform.dir}" alias="@${drush.alias.default}" bin="${toolkit.dir.bin.drush}">
                  <param>drush</param>
              </drush>
            </then>
            <else>
              <echo msg="Drupal 8 detected, is not possible to generate settings using the current script." />
            </else>
          </if>
      </target>


    <target name="drush-uris-generate" description="Generate list of uris.">
        <drush command="php-script" root="${build.platform.dir}" alias="@${drush.alias.default}" bin="${toolkit.dir.bin.drush}" verbose="${drush.verbose}" color="${drush.color}">
            <param>${toolkit.dir.incl.drush}/generate-uris.php</param>
            <param>${backtrac.file}</param>
        </drush>
    </target>

    <target name="drush-cache-reset" description="Disable and clean cache." hidden="true">
      <propertyregex property="profile.core.major" subject="${profile.core}" pattern="^([0-9]+)\." match="$1" override="true" />
      <if>
          <equals arg1="${profile.core.major}" arg2="7" />
          <then>
            <drush
                command="vset"
                assume="yes"
                root="${build.platform.dir}"
                alias="@${drush.alias.default}"
                bin="${toolkit.dir.bin.drush}"
                verbose="${drush.verbose}"
                color="${drush.color}">
                <param>preprocess_css 0</param>
            </drush>
            <drush
                command="vset"
                assume="yes"
                root="${build.platform.dir}"
                alias="@${drush.alias.default}"
                bin="${toolkit.dir.bin.drush}"
                verbose="${drush.verbose}"
                color="${drush.color}">
                <param>preprocess_js 0</param>
            </drush>
            <drush
                command="cc"
                assume="yes"
                root="${build.platform.dir}"
                alias="@${drush.alias.default}"
                bin="${toolkit.dir.bin.drush}"
                verbose="${drush.verbose}"
                color="${drush.color}">
                <param>all</param>
            </drush>
          </then>
          <else>
            <echo msg="Variable set is not supported in Drupal 8. Need refactor." />
          </else>
        </if>
    </target>

    <target name="drush-site-install" hidden="true" description="Install a site.">
        <echo message="Installing site ${project.name}." />
        <drush command="site-install" assume="yes" root="${build.platform.dir}" bin="${toolkit.dir.bin.drush}" alias="@${drush.alias.default}" verbose="${drush.verbose}" color="${drush.color}">
            <option name="db-url" value="${db.url}" />
            <option name="site-name" value="'${project.name}'" />
            <option name="account-name" value="${admin.username}" />
            <option name="account-pass" value="${admin.password}" />
            <option name="account-mail" value="${admin.email}" />
            <param>${profile.name}</param>
            <param>install_configure_form.update_status_module='array(FALSE,FALSE)'
            </param>
        </drush>
        <phingcall target="drush-settings-generate" />
    </target>

    <target name="drush-solr-enable" hidden="true" description="Enable the solr module.">
        <if>
            <equals arg1="${solr.enable}" arg2="1" />
            <then>
                <echo message="Enable apachesolr for ${db.name}." />
                <phingcall target="drush-modules-enable">
                    <property name="project.drupal.modules" value="apachesolr" />
                </phingcall>
                <exec command="${toolkit.dir.bin.drush} cc drush >/dev/null" />
                <drush command="solr-set-env-url" assume="yes" root="${build.platform.dir}" alias="@${drush.alias.default}" bin="${toolkit.dir.bin.drush}" verbose="${drush.verbose}" color="${drush.color}">
                    <param>${solr.url}</param>
                </drush>
            </then>
        </if>
    </target>

    <target name="drush-sql-create" hidden="true" description="Create a database.">
        <echo message="Creating database ${db.name}." />
        <drush command="sql-create" assume="yes" root="${build.platform.dir}" alias="@${drush.alias.default}" bin="${toolkit.dir.bin.drush}" verbose="${drush.verbose}" color="${drush.color}">
            <option name="db-url" value="${db.url}" />
        </drush>
    </target>

    <target name="drush-sql-import" hidden="true" description="Import a database.">
        <echo message="Importing database." />
        <drush command="sql-cli" root="${build.platform.dir}" alias="@${drush.alias.default}" bin="${toolkit.dir.bin.drush}" verbose="${drush.verbose}" color="${drush.color}">
            <option name="db-url" value="${db.url}" />
            <param>&lt; ${database-file}</param>
        </drush>
        <if>
            <not>
                <equals arg1="${build.site}" arg2="${project.id}" />
            </not>
            <then>
                <relsym link="${build.platform.dir}/sites/${project.id}" target="${build.subsite.dir}" />
            </then>
        </if>
        <if>
            <equals arg1="${drush.rr.enabled}" arg2="1" />
            <then>
                <phingcall target="drush-registry-rebuild" />
            </then>
        </if>
        <phingcall target="drush-files-dirs-htaccess" />
        <if>
            <equals arg1="${profile}" arg2="multisite_drupal_standard" />
            <then>
                <phingcall target="drush-solr-enable" />
            </then>
        </if>
        <drush command="updatedb" assume="yes" root="${build.platform.dir}" alias="@${drush.alias.default}" bin="${toolkit.dir.bin.drush}"></drush>
    </target>

    <target name="drush-sql-drop" hidden="true" description="Drop a database.">
        <echo message="Dropping database ${db.name}." />
        <drush command="sql-drop" assume="yes" root="${build.platform.dir}" alias="@${drush.alias.default}" bin="${toolkit.dir.bin.drush}" verbose="${drush.verbose}" color="${drush.color}">
            <option name="db-url" value="${db.url}" />
        </drush>
    </target>

    <target name="drush-sql-dump" hidden="true" description="Make a dump of database.">
        <echo message="Backing up database ${db.name} to ${database-file}." />
        <dirname property="database-cachedir" file="${database-file}" />
        <mkdir dir="${database-cachedir}" />
        <drush command="sql-dump" assume="yes" root="${build.platform.dir}" alias="@${drush.alias.default}" bin="${toolkit.dir.bin.drush}" verbose="${drush.verbose}" color="${drush.color}">
            <option name="result-file" value="${database-file}" />
        </drush>
    </target>

    <target name="drush-run-smoketest" hidden="true" description="Visit pages and check for watchog messages.">
       <propertyregex property="profile.core.major" subject="${profile.core}" pattern="^([0-9]+)\." match="$1" override="true" />
       <if>
         <equals arg1="${profile.core.major}" arg2="7" />
         <then>
           <drush command="en" assume="yes" root="${build.platform.dir}" alias="@${drush.alias.default}" bin="${toolkit.dir.bin.drush}" verbose="${drush.verbose}" color="${drush.color}">
              <param>dblog</param>
           </drush>
           <drush command="watchdog-smoketest" assume="yes" root="${build.platform.dir}" alias="@${drush.alias.default}" bin="${toolkit.dir.bin.drush}" verbose="${drush.verbose}" color="${drush.color}" />
         </then>
         <else>
           <echo msg="Smoketest disabled for D8 project." />
         </else>
       </if>
    </target>

    <target name="drush-gdpr-dump" hidden="true" description="Make a sanitized dump of database.">
        <propertyregex property="profile.core.major" subject="${profile.core}" pattern="^([0-9]+)\." match="$1" override="true" />
        <dirname property="database-cachedir" file="${database-file}" />
        <mkdir dir="${database-cachedir}" />
        
        <echo message="Backing up database ${db.name} to ${database-file}." />
        
        <if>
            <equals arg1="${profile.core.major}" arg2="7" />
            <then>
                <trycatch>
                    <try>
                        <exec command="${toolkit.dir.bin.drush} -r ${build.platform.dir} gdpr-sql-dump --help" checkreturn="true" />
                    </try>
                    <catch>
                        <if>
                            <equals arg1="${profile.core.major}" arg2="7" />
                            <then>
                                <drush command="dl" assume="yes" root="${build.platform.dir}" alias="@${drush.alias.default}" bin="${toolkit.dir.bin.drush}" verbose="${drush.verbose}" color="${drush.color}">
                                <param>gdpr-7.x-1.0-alpha11 checklistapi-7.x-1.1</param>
                                </drush>
                            </then>
                        </if>
                    </catch>
                    <finally>
                        <drush command="en" assume="yes" root="${build.platform.dir}" alias="@${drush.alias.default}" bin="${toolkit.dir.bin.drush}" verbose="${drush.verbose}" color="${drush.color}">
                            <param>gdpr_dump</param>
                        </drush>
                        <exec command='${toolkit.dir.bin.drush} -r ${build.platform.dir} vset gdpr_dump_table_map &apos;{"users":{"name":"UsernameSanitizer","mail":"EmailSanitizer","init":"EmailSanitizer","pass":"PasswordSanitizer"}}&apos; --format=json --exact -y >/dev/null' escape="false" />
                    </finally>
                </trycatch>
                
                <drush command="gdpr-sql-dump" assume="yes" root="${build.platform.dir}" alias="@${drush.alias.default}" bin="${toolkit.dir.bin.drush}" verbose="${drush.verbose}" color="${drush.color}">
                    <option name="result-file" value="${database-file}" />
                </drush>
            </then>
            <else>
                <drush command="sql-dump" assume="yes" root="${build.platform.dir}" alias="@${drush.alias.default}" bin="${toolkit.dir.bin.drush}" verbose="${drush.verbose}" color="${drush.color}">
                    <option name="result-file" value="${database-file}" />
                </drush>
            </else>
        </if>
    </target>
</project>
