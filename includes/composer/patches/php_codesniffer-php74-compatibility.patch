diff --git a/CodeSniffer.php b/CodeSniffer.php
index fa682c6..8850dfa 100644
--- a/CodeSniffer.php
+++ b/CodeSniffer.php
@@ -2025,12 +2025,12 @@ class PHP_CodeSniffer
             $lastCharWasCaps = $classFormat;
 
             for ($i = 1; $i < $length; $i++) {
-                $ascii = ord($string{$i});
+                $ascii = ord($string[$i]);
                 if ($ascii >= 48 && $ascii <= 57) {
                     // The character is a number, so it cant be a capital.
                     $isCaps = false;
                 } else {
-                    if (strtoupper($string{$i}) === $string{$i}) {
+                    if (strtoupper($string[$i]) === $string[$i]) {
                         $isCaps = true;
                     } else {
                         $isCaps = false;
@@ -2076,7 +2076,7 @@ class PHP_CodeSniffer
                     continue;
                 }
 
-                if ($bit{0} !== strtoupper($bit{0})) {
+                if ($bit[0] !== strtoupper($bit[0])) {
                     $validName = false;
                     break;
                 }
diff --git a/CodeSniffer/CLI.php b/CodeSniffer/CLI.php
index 29403cf..16095e1 100644
--- a/CodeSniffer/CLI.php
+++ b/CodeSniffer/CLI.php
@@ -450,13 +450,13 @@ class PHP_CodeSniffer_CLI
                 continue;
             }

-            if ($arg{0} === '-') {
+            if ($arg[0] === '-') {
                 if ($arg === '-' || $arg === '--') {
                     // Empty argument, ignore it.
                     continue;
                 }

-                if ($arg{1} === '-') {
+                if ($arg[1] === '-') {
                     $this->processLongArgument(substr($arg, 2), $i);
                 } else {
                     $switches = str_split($arg);
@@ -736,7 +736,7 @@ class PHP_CodeSniffer_CLI
                         // Passed report file is a file in the current directory.
                         $this->values['reportFile'] = getcwd().'/'.basename($this->values['reportFile']);
                     } else {
-                        if ($dir{0} === '/') {
+                        if ($dir[0] === '/') {
                             // An absolute path.
                             $dir = PHP_CodeSniffer::realpath($dir);
                         } else {
@@ -777,7 +777,7 @@ class PHP_CodeSniffer_CLI
                                 // Passed report file is a filename in the current directory.
                                 $output = getcwd().'/'.basename($output);
                             } else {
-                                if ($dir{0} === '/') {
+                                if ($dir[0] === '/') {
                                     // An absolute path.
                                     $dir = PHP_CodeSniffer::realpath($dir);
                                 } else {
@@ -871,7 +871,7 @@ class PHP_CodeSniffer_CLI
     public function processUnknownArgument($arg, $pos)
     {
         // We don't know about any additional switches; just files.
-        if ($arg{0} === '-') {
+        if ($arg[0] === '-') {
             if ($this->dieOnUnknownArg === false) {
                 return;
             }
diff --git a/CodeSniffer/File.php b/CodeSniffer/File.php
index 17f155b..36ae176 100644
--- a/CodeSniffer/File.php
+++ b/CodeSniffer/File.php
@@ -2264,7 +2264,7 @@ class PHP_CodeSniffer_File
                         $ignore++;
                     } else {
                         // Make sure this is actually an opener and not a
-                        // string offset (e.g., $var{0}).
+                        // string offset (e.g., $var[0]).
                         for ($x = ($i - 1); $x > 0; $x--) {
                             if (isset(PHP_CodeSniffer_Tokens::$emptyTokens[$tokens[$x]['code']]) === true) {
                                 continue;
diff --git a/CodeSniffer/Standards/MySource/Sniffs/CSS/BrowserSpecificStylesSniff.php b/CodeSniffer/Standards/MySource/Sniffs/CSS/BrowserSpecificStylesSniff.php
index 7feecb7..12707c0 100644
--- a/CodeSniffer/Standards/MySource/Sniffs/CSS/BrowserSpecificStylesSniff.php
+++ b/CodeSniffer/Standards/MySource/Sniffs/CSS/BrowserSpecificStylesSniff.php
@@ -89,7 +89,7 @@ class MySource_Sniffs_CSS_BrowserSpecificStylesSniff implements PHP_CodeSniffer_
         $tokens  = $phpcsFile->getTokens();
         $content = $tokens[$stackPtr]['content'];

-        if ($content{0} === '-') {
+        if ($content[0] === '-') {
             $error = 'Browser-specific styles are not allowed';
             $phpcsFile->addError($error, $stackPtr, 'ForbiddenStyle');
         }
diff --git a/CodeSniffer/Standards/MySource/Sniffs/Channels/DisallowSelfActionsSniff.php b/CodeSniffer/Standards/MySource/Sniffs/Channels/DisallowSelfActionsSniff.php
index a0544ca..e2b6872 100644
--- a/CodeSniffer/Standards/MySource/Sniffs/Channels/DisallowSelfActionsSniff.php
+++ b/CodeSniffer/Standards/MySource/Sniffs/Channels/DisallowSelfActionsSniff.php
@@ -101,7 +101,7 @@ class MySource_Sniffs_Channels_DisallowSelfActionsSniff implements PHP_CodeSniff
             // We've found the function, now we need to find it and see if it is
             // public, private or protected. If it starts with an underscore we
             // can assume it is private.
-            if ($funcName{0} === '_') {
+            if ($funcName[0] === '_') {
                 continue;
             }

diff --git a/CodeSniffer/Standards/PEAR/Sniffs/Commenting/FileCommentSniff.php b/CodeSniffer/Standards/PEAR/Sniffs/Commenting/FileCommentSniff.php
index 502e432..aef4a16 100644
--- a/CodeSniffer/Standards/PEAR/Sniffs/Commenting/FileCommentSniff.php
+++ b/CodeSniffer/Standards/PEAR/Sniffs/Commenting/FileCommentSniff.php
@@ -383,10 +383,10 @@ class PEAR_Sniffs_Commenting_FileCommentSniff implements PHP_CodeSniffer_Sniff
             } else {
                 $nameBits = explode('_', $newContent);
                 $firstBit = array_shift($nameBits);
-                $newName  = strtoupper($firstBit{0}).substr($firstBit, 1).'_';
+                $newName  = strtoupper($firstBit[0]).substr($firstBit, 1).'_';
                 foreach ($nameBits as $bit) {
                     if ($bit !== '') {
-                        $newName .= strtoupper($bit{0}).substr($bit, 1).'_';
+                        $newName .= strtoupper($bit[0]).substr($bit, 1).'_';
                     }
                 }

@@ -428,10 +428,10 @@ class PEAR_Sniffs_Commenting_FileCommentSniff implements PHP_CodeSniffer_Sniff
             $newContent = str_replace(' ', '_', $content);
             $nameBits   = explode('_', $newContent);
             $firstBit   = array_shift($nameBits);
-            $newName    = strtoupper($firstBit{0}).substr($firstBit, 1).'_';
+            $newName    = strtoupper($firstBit[0]).substr($firstBit, 1).'_';
             foreach ($nameBits as $bit) {
                 if ($bit !== '') {
-                    $newName .= strtoupper($bit{0}).substr($bit, 1).'_';
+                    $newName .= strtoupper($bit[0]).substr($bit, 1).'_';
                 }
             }

diff --git a/CodeSniffer/Standards/PEAR/Sniffs/Commenting/InlineCommentSniff.php b/CodeSniffer/Standards/PEAR/Sniffs/Commenting/InlineCommentSniff.php
index fcc1d7a..24f83a2 100644
--- a/CodeSniffer/Standards/PEAR/Sniffs/Commenting/InlineCommentSniff.php
+++ b/CodeSniffer/Standards/PEAR/Sniffs/Commenting/InlineCommentSniff.php
@@ -56,7 +56,7 @@ class PEAR_Sniffs_Commenting_InlineCommentSniff implements PHP_CodeSniffer_Sniff
     {
         $tokens = $phpcsFile->getTokens();

-        if ($tokens[$stackPtr]['content']{0} === '#') {
+        if ($tokens[$stackPtr]['content'][0] === '#') {
             $phpcsFile->recordMetric($stackPtr, 'Inline comment style', '# ...');

             $error  = 'Perl-style comments are not allowed. Use "// Comment."';
@@ -67,12 +67,12 @@ class PEAR_Sniffs_Commenting_InlineCommentSniff implements PHP_CodeSniffer_Sniff
                 $newComment = '// '.$newComment;
                 $phpcsFile->fixer->replaceToken($stackPtr, $newComment);
             }
-        } else if ($tokens[$stackPtr]['content']{0} === '/'
-            && $tokens[$stackPtr]['content']{1} === '/'
+        } else if ($tokens[$stackPtr]['content'][0] === '/'
+            && $tokens[$stackPtr]['content'][1] === '/'
         ) {
             $phpcsFile->recordMetric($stackPtr, 'Inline comment style', '// ...');
-        } else if ($tokens[$stackPtr]['content']{0} === '/'
-            && $tokens[$stackPtr]['content']{1} === '*'
+        } else if ($tokens[$stackPtr]['content'][0] === '/'
+            && $tokens[$stackPtr]['content'][1] === '*'
         ) {
             $phpcsFile->recordMetric($stackPtr, 'Inline comment style', '/* ... */');
         }
diff --git a/CodeSniffer/Standards/PEAR/Sniffs/NamingConventions/ValidClassNameSniff.php b/CodeSniffer/Standards/PEAR/Sniffs/NamingConventions/ValidClassNameSniff.php
index 7eb587d..1b70f86 100644
--- a/CodeSniffer/Standards/PEAR/Sniffs/NamingConventions/ValidClassNameSniff.php
+++ b/CodeSniffer/Standards/PEAR/Sniffs/NamingConventions/ValidClassNameSniff.php
@@ -77,7 +77,7 @@ class PEAR_Sniffs_NamingConventions_ValidClassNameSniff implements PHP_CodeSniff
         $nameBits  = explode('_', $name);
         $firstBit  = array_shift($nameBits);
         foreach ($nameBits as $bit) {
-            if ($bit === '' || $bit{0} !== strtoupper($bit{0})) {
+            if ($bit === '' || $bit[0] !== strtoupper($bit[0])) {
                 $validName = false;
                 break;
             }
@@ -92,10 +92,10 @@ class PEAR_Sniffs_NamingConventions_ValidClassNameSniff implements PHP_CodeSniff
                 $error = '%s name is not valid';
                 $phpcsFile->addError($error, $stackPtr, 'Invalid', $errorData);
             } else {
-                $newName = strtoupper($firstBit{0}).substr($firstBit, 1).'_';
+                $newName = strtoupper($firstBit[0]).substr($firstBit, 1).'_';
                 foreach ($nameBits as $bit) {
                     if ($bit !== '') {
-                        $newName .= strtoupper($bit{0}).substr($bit, 1).'_';
+                        $newName .= strtoupper($bit[0]).substr($bit, 1).'_';
                     }
                 }

diff --git a/CodeSniffer/Standards/PEAR/Sniffs/NamingConventions/ValidFunctionNameSniff.php b/CodeSniffer/Standards/PEAR/Sniffs/NamingConventions/ValidFunctionNameSniff.php
index 410009c..cd939b6 100644
--- a/CodeSniffer/Standards/PEAR/Sniffs/NamingConventions/ValidFunctionNameSniff.php
+++ b/CodeSniffer/Standards/PEAR/Sniffs/NamingConventions/ValidFunctionNameSniff.php
@@ -130,7 +130,7 @@ class PEAR_Sniffs_NamingConventions_ValidFunctionNameSniff extends PHP_CodeSniff

         // If it's a private method, it must have an underscore on the front.
         if ($isPublic === false) {
-            if ($methodName{0} !== '_') {
+            if ($methodName[0] !== '_') {
                 $error = 'Private method name "%s" must be prefixed with an underscore';
                 $phpcsFile->addError($error, $stackPtr, 'PrivateNoUnderscore', $errorData);
                 $phpcsFile->recordMetric($stackPtr, 'Private method prefixed with underscore', 'no');
@@ -141,7 +141,7 @@ class PEAR_Sniffs_NamingConventions_ValidFunctionNameSniff extends PHP_CodeSniff
         }

         // If it's not a private method, it must not have an underscore on the front.
-        if ($isPublic === true && $scopeSpecified === true && $methodName{0} === '_') {
+        if ($isPublic === true && $scopeSpecified === true && $methodName[0] === '_') {
             $error = '%s method name "%s" must not be prefixed with an underscore';
             $data  = array(
                       ucfirst($scope),
@@ -157,7 +157,7 @@ class PEAR_Sniffs_NamingConventions_ValidFunctionNameSniff extends PHP_CodeSniff
         // prefix if there is one because we cant determine if it is private or
         // public.
         $testMethodName = $methodName;
-        if ($scopeSpecified === false && $methodName{0} === '_') {
+        if ($scopeSpecified === false && $methodName[0] === '_') {
             $testMethodName = substr($methodName, 1);
         }

@@ -232,13 +232,13 @@ class PEAR_Sniffs_NamingConventions_ValidFunctionNameSniff extends PHP_CodeSniff

         // If it has a package part, make sure the first letter is a capital.
         if ($packagePart !== '') {
-            if ($functionName{0} === '_') {
+            if ($functionName[0] === '_') {
                 $error = 'Function name "%s" is invalid; only private methods should be prefixed with an underscore';
                 $phpcsFile->addError($error, $stackPtr, 'FunctionUnderscore', $errorData);
                 return;
             }

-            if ($functionName{0} !== strtoupper($functionName{0})) {
+            if ($functionName[0] !== strtoupper($functionName[0])) {
                 $error = 'Function name "%s" is prefixed with a package name but does not begin with a capital letter';
                 $phpcsFile->addError($error, $stackPtr, 'FunctionNoCapital', $errorData);
                 return;
@@ -259,17 +259,17 @@ class PEAR_Sniffs_NamingConventions_ValidFunctionNameSniff extends PHP_CodeSniff
         // Every function must have a camel caps part, so check that first.
         if (PHP_CodeSniffer::isCamelCaps($camelCapsPart, false, true, false) === false) {
             $validName        = false;
-            $newCamelCapsPart = strtolower($camelCapsPart{0}).substr($camelCapsPart, 1);
+            $newCamelCapsPart = strtolower($camelCapsPart[0]).substr($camelCapsPart, 1);
         }

         if ($packagePart !== '') {
             // Check that each new word starts with a capital.
             $nameBits = explode('_', $packagePart);
             foreach ($nameBits as $bit) {
-                if ($bit{0} !== strtoupper($bit{0})) {
+                if ($bit[0] !== strtoupper($bit[0])) {
                     $newPackagePart = '';
                     foreach ($nameBits as $bit) {
-                        $newPackagePart .= strtoupper($bit{0}).substr($bit, 1).'_';
+                        $newPackagePart .= strtoupper($bit[0]).substr($bit, 1).'_';
                     }

                     $validName = false;
diff --git a/CodeSniffer/Standards/PEAR/Sniffs/NamingConventions/ValidVariableNameSniff.php b/CodeSniffer/Standards/PEAR/Sniffs/NamingConventions/ValidVariableNameSniff.php
index 2cc7bef..3319c03 100644
--- a/CodeSniffer/Standards/PEAR/Sniffs/NamingConventions/ValidVariableNameSniff.php
+++ b/CodeSniffer/Standards/PEAR/Sniffs/NamingConventions/ValidVariableNameSniff.php
@@ -63,7 +63,7 @@ class PEAR_Sniffs_NamingConventions_ValidVariableNameSniff extends PHP_CodeSniff
         }

         // If it's a private member, it must have an underscore on the front.
-        if ($isPublic === false && $memberName{0} !== '_') {
+        if ($isPublic === false && $memberName[0] !== '_') {
             $error = 'Private member variable "%s" must be prefixed with an underscore';
             $data  = array($memberName);
             $phpcsFile->addError($error, $stackPtr, 'PrivateNoUnderscore', $data);
@@ -71,7 +71,7 @@ class PEAR_Sniffs_NamingConventions_ValidVariableNameSniff extends PHP_CodeSniff
         }

         // If it's not a private member, it must not have an underscore on the front.
-        if ($isPublic === true && $scopeSpecified === true && $memberName{0} === '_') {
+        if ($isPublic === true && $scopeSpecified === true && $memberName[0] === '_') {
             $error = '%s member variable "%s" must not be prefixed with an underscore';
             $data  = array(
                       ucfirst($scope),
diff --git a/CodeSniffer/Standards/Squiz/Sniffs/CSS/ColourDefinitionSniff.php b/CodeSniffer/Standards/Squiz/Sniffs/CSS/ColourDefinitionSniff.php
index 85849ca..a2436d3 100644
--- a/CodeSniffer/Standards/Squiz/Sniffs/CSS/ColourDefinitionSniff.php
+++ b/CodeSniffer/Standards/Squiz/Sniffs/CSS/ColourDefinitionSniff.php
@@ -81,8 +81,8 @@ class Squiz_Sniffs_CSS_ColourDefinitionSniff implements PHP_CodeSniffer_Sniff
             return;
         }

-        if ($colour{1} === $colour{2} && $colour{3} === $colour{4} && $colour{5} === $colour{6}) {
-            $expected = '#'.$colour{1}.$colour{3}.$colour{5};
+        if ($colour[1] === $colour[2] && $colour[3] === $colour[4] && $colour[5] === $colour[6]) {
+            $expected = '#'.$colour[1].$colour[3].$colour[5];
             $error    = 'CSS colours must use shorthand if available; expected %s but found %s';
             $data     = array(
                          $expected,
diff --git a/CodeSniffer/Standards/Squiz/Sniffs/CSS/DuplicateClassDefinitionSniff.php b/CodeSniffer/Standards/Squiz/Sniffs/CSS/DuplicateClassDefinitionSniff.php
index be1ac03..f09b481 100644
--- a/CodeSniffer/Standards/Squiz/Sniffs/CSS/DuplicateClassDefinitionSniff.php
+++ b/CodeSniffer/Standards/Squiz/Sniffs/CSS/DuplicateClassDefinitionSniff.php
@@ -107,7 +107,7 @@ class Squiz_Sniffs_CSS_DuplicateClassDefinitionSniff implements PHP_CodeSniffer_
             sort($names);
             $name = implode(',', $names);

-            if ($name{0} === '@') {
+            if ($name[0] === '@') {
                 // Media block has its own "scope".
                 $scope = $name;
             } else if (isset($classNames[$scope][$name]) === true) {
diff --git a/CodeSniffer/Standards/Squiz/Sniffs/CSS/OpacitySniff.php b/CodeSniffer/Standards/Squiz/Sniffs/CSS/OpacitySniff.php
index 4f2a32c..8d84480 100644
--- a/CodeSniffer/Standards/Squiz/Sniffs/CSS/OpacitySniff.php
+++ b/CodeSniffer/Standards/Squiz/Sniffs/CSS/OpacitySniff.php
@@ -86,19 +86,19 @@ class Squiz_Sniffs_CSS_OpacitySniff implements PHP_CodeSniffer_Sniff
                 $phpcsFile->addError($error, $next, 'DecimalPrecision');
             } else if ($value === '0.0' || $value === '1.0') {
                 $error = 'Opacity value does not require decimal point; use %s instead';
-                $data  = array($value{0});
+                $data  = array($value[0]);
                 $fix   = $phpcsFile->addFixableError($error, $next, 'PointNotRequired', $data);
                 if ($fix === true) {
-                    $phpcsFile->fixer->replaceToken($next, $value{0});
+                    $phpcsFile->fixer->replaceToken($next, $value[0]);
                 }
-            } else if ($value{0} === '.') {
+            } else if ($value[0] === '.') {
                 $error = 'Opacity values must not start with a decimal point; use 0%s instead';
                 $data  = array($value);
                 $fix   = $phpcsFile->addFixableError($error, $next, 'StartWithPoint', $data);
                 if ($fix === true) {
                     $phpcsFile->fixer->replaceToken($next, '0'.$value);
                 }
-            } else if ($value{0} !== '0') {
+            } else if ($value[0] !== '0') {
                 $error = 'Opacity values must be between 0 and 1';
                 $phpcsFile->addError($error, $next, 'Invalid');
             }//end if
diff --git a/CodeSniffer/Standards/Squiz/Sniffs/Commenting/FunctionCommentSniff.php b/CodeSniffer/Standards/Squiz/Sniffs/Commenting/FunctionCommentSniff.php
index 3cea944..6c2822c 100644
--- a/CodeSniffer/Standards/Squiz/Sniffs/Commenting/FunctionCommentSniff.php
+++ b/CodeSniffer/Standards/Squiz/Sniffs/Commenting/FunctionCommentSniff.php
@@ -228,7 +228,7 @@ class Squiz_Sniffs_Commenting_FunctionCommentSniff extends PEAR_Sniffs_Commentin
                 }

                 // Starts with a capital letter and ends with a fullstop.
-                $firstChar = $comment{0};
+                $firstChar = $comment[0];
                 if (strtoupper($firstChar) !== $firstChar) {
                     $error = '@throws tag comment must start with a capital letter';
                     $phpcsFile->addError($error, ($tag + 2), 'ThrowsNotCapital');
diff --git a/CodeSniffer/Standards/Squiz/Sniffs/Commenting/InlineCommentSniff.php b/CodeSniffer/Standards/Squiz/Sniffs/Commenting/InlineCommentSniff.php
index fb5710f..d59be4e 100644
--- a/CodeSniffer/Standards/Squiz/Sniffs/Commenting/InlineCommentSniff.php
+++ b/CodeSniffer/Standards/Squiz/Sniffs/Commenting/InlineCommentSniff.php
@@ -138,7 +138,7 @@ class Squiz_Sniffs_Commenting_InlineCommentSniff implements PHP_CodeSniffer_Snif
             }
         }//end if

-        if ($tokens[$stackPtr]['content']{0} === '#') {
+        if ($tokens[$stackPtr]['content'][0] === '#') {
             $error = 'Perl-style comments are not allowed; use "// Comment" instead';
             $fix   = $phpcsFile->addFixableError($error, $stackPtr, 'WrongStyle');
             if ($fix === true) {
diff --git a/CodeSniffer/Tokenizers/CSS.php b/CodeSniffer/Tokenizers/CSS.php
index 8656e05..66352bd 100644
--- a/CodeSniffer/Tokenizers/CSS.php
+++ b/CodeSniffer/Tokenizers/CSS.php
@@ -175,14 +175,14 @@ class PHP_CodeSniffer_Tokenizers_CSS extends PHP_CodeSniffer_Tokenizers_PHP
             if ($token['code'] === T_COMMENT
                 && $multiLineComment === false
                 && (substr($token['content'], 0, 2) === '//'
-                || $token['content']{0} === '#')
+                || $token['content'][0] === '#')
             ) {
                 $content = ltrim($token['content'], '#/');

                 // Guard against PHP7+ syntax errors by stripping
                 // leading zeros so the content doesn't look like an invalid int.
                 $leadingZero = false;
-                if ($content{0} === '0') {
+                if ($content[0] === '0') {
                     $content     = '1'.$content;
                     $leadingZero = true;
                 }
@@ -198,7 +198,7 @@ class PHP_CodeSniffer_Tokenizers_CSS extends PHP_CodeSniffer_Tokenizers_PHP
                     $content = substr($content, 1);
                 }

-                if ($token['content']{0} === '#') {
+                if ($token['content'][0] === '#') {
                     // The # character is not a comment in CSS files, so
                     // determine what it means in this context.
                     $firstContent = $commentTokens[0]['content'];
