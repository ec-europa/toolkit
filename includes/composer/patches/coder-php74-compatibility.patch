diff --git a/coder_sniffer/Drupal/Sniffs/Commenting/FunctionCommentSniff.php b/coder_sniffer/Drupal/Sniffs/Commenting/FunctionCommentSniff.php
index ed9e14c..77d694c 100644
--- a/coder_sniffer/Drupal/Sniffs/Commenting/FunctionCommentSniff.php
+++ b/coder_sniffer/Drupal/Sniffs/Commenting/FunctionCommentSniff.php
@@ -425,7 +425,7 @@ class Drupal_Sniffs_Commenting_FunctionCommentSniff implements PHP_CodeSniffer_S
                 }
 
                 // Starts with a capital letter and ends with a fullstop.
-                $firstChar = $comment{0};
+                $firstChar = $comment[0];
                 if (strtoupper($firstChar) !== $firstChar) {
                     $error = '@throws tag comment must start with a capital letter';
                     $phpcsFile->addError($error, $throwStart, 'ThrowsNotCapital');
diff --git a/coder_sniffer/Drupal/Sniffs/Commenting/InlineCommentSniff.php b/coder_sniffer/Drupal/Sniffs/Commenting/InlineCommentSniff.php
index 32da8dd..9a2a9ed 100644
--- a/coder_sniffer/Drupal/Sniffs/Commenting/InlineCommentSniff.php
+++ b/coder_sniffer/Drupal/Sniffs/Commenting/InlineCommentSniff.php
@@ -136,7 +136,7 @@ class Drupal_Sniffs_Commenting_InlineCommentSniff implements PHP_CodeSniffer_Sni
             }
         }//end if
 
-        if ($tokens[$stackPtr]['content']{0} === '#') {
+        if ($tokens[$stackPtr]['content'][0] === '#') {
             $error = 'Perl-style comments are not allowed; use "// Comment" instead';
             $fix   = $phpcsFile->addFixableError($error, $stackPtr, 'WrongStyle');
             if ($fix === true) {
diff --git a/coder_sniffer/Drupal/Sniffs/NamingConventions/ValidGlobalSniff.php b/coder_sniffer/Drupal/Sniffs/NamingConventions/ValidGlobalSniff.php
index 1422c48..8159ced 100644
--- a/coder_sniffer/Drupal/Sniffs/NamingConventions/ValidGlobalSniff.php
+++ b/coder_sniffer/Drupal/Sniffs/NamingConventions/ValidGlobalSniff.php
@@ -100,7 +100,7 @@ class Drupal_Sniffs_NamingConventions_ValidGlobalSniff implements PHP_CodeSniffe
         while (($varToken = $phpcsFile->findNext($ignore, ($varToken + 1), null, true, null, true)) !== false) {
             if ($tokens[$varToken]['code'] === T_VARIABLE
                 && in_array($tokens[$varToken]['content'], $this->coreGlobals) === false
-                && $tokens[$varToken]['content']{1} !== '_'
+                && $tokens[$varToken]['content'][1] !== '_'
             ) {
                 $error = 'global variables should start with a single underscore followed by the module and another underscore';
                 $phpcsFile->addError($error, $varToken, 'GlobalUnderScore');
diff --git a/coder_sniffer/Drupal/Sniffs/Semantics/FunctionTSniff.php b/coder_sniffer/Drupal/Sniffs/Semantics/FunctionTSniff.php
index e538585..5a0755b 100644
--- a/coder_sniffer/Drupal/Sniffs/Semantics/FunctionTSniff.php
+++ b/coder_sniffer/Drupal/Sniffs/Semantics/FunctionTSniff.php
@@ -113,7 +113,7 @@ class Drupal_Sniffs_Semantics_FunctionTSniff extends Drupal_Sniffs_Semantics_Fun
 
         // Check if there is a backslash escaped single quote in the string and
         // if the string makes use of double quotes.
-        if ($string{0} === "'" && strpos($string, "\'") !== false
+        if ($string[0] === "'" && strpos($string, "\'") !== false
             && strpos($string, '"') === false
         ) {
             $warn = 'Avoid backslash escaping in translatable strings when possible, use "" quotes instead';
@@ -121,7 +121,7 @@ class Drupal_Sniffs_Semantics_FunctionTSniff extends Drupal_Sniffs_Semantics_Fun
             return;
         }
 
-        if ($string{0} === '"' && strpos($string, '\"') !== false
+        if ($string[0] === '"' && strpos($string, '\"') !== false
             && strpos($string, "'") === false
         ) {
             $warn = "Avoid backslash escaping in translatable strings when possible, use '' quotes instead";
diff --git a/coder_sniffer/Drupal/Sniffs/Semantics/LStringTranslatableSniff.php b/coder_sniffer/Drupal/Sniffs/Semantics/LStringTranslatableSniff.php
index 6b48994..37acaa0 100644
--- a/coder_sniffer/Drupal/Sniffs/Semantics/LStringTranslatableSniff.php
+++ b/coder_sniffer/Drupal/Sniffs/Semantics/LStringTranslatableSniff.php
@@ -54,7 +54,7 @@ class Drupal_Sniffs_Semantics_LStringTranslatableSniff extends Drupal_Sniffs_Sem
         $argument = $this->getArgument(1);
         if ($tokens[$argument['start']]['code'] === T_CONSTANT_ENCAPSED_STRING
             // If the string starts with a HTML tag we don't complain.
-            && $tokens[$argument['start']]['content']{1} !== '<'
+            && $tokens[$argument['start']]['content'][1] !== '<'
         ) {
             $error = 'The $text argument to l() should be enclosed within t() so that it is translatable';
             $phpcsFile->addError($error, $stackPtr, 'LArg');
diff --git a/coder_sniffer/Drupal/Sniffs/WhiteSpace/ScopeIndentSniff.php b/coder_sniffer/Drupal/Sniffs/WhiteSpace/ScopeIndentSniff.php
index 2fff41d..382e227 100644
--- a/coder_sniffer/Drupal/Sniffs/WhiteSpace/ScopeIndentSniff.php
+++ b/coder_sniffer/Drupal/Sniffs/WhiteSpace/ScopeIndentSniff.php
@@ -807,7 +807,7 @@ class Drupal_Sniffs_WhiteSpace_ScopeIndentSniff implements PHP_CodeSniffer_Sniff
             // Comments starting with a star have an extra whitespace.
             if ($checkToken !== null && $tokens[$checkToken]['code'] === T_COMMENT) {
                 $content = trim($tokens[$checkToken]['content']);
-                if ($content{0} === '*') {
+                if ($content[0] === '*') {
                     $checkIndent += 1;
                 }
             }
